(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@cloudinary/angular-5.x', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global.cloudinary = global.cloudinary || {}, global.cloudinary['angular-5'] = global.cloudinary['angular-5'] || {}, global.cloudinary['angular-5'].x = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** *
     * Returns true if the given string begins with a left curly brace and ends with a right curly brace, e.g.
     * "{asdas d}" will return true, "asdasd}" will return false.
     *
     * this function does not validate the correctness of the string content other than the first and last character
     * \@param str
     * \@return boolean
      @type {?} */
    var isJsonLikeString = function (str) {
        // [\s\S] allows the string to contain new lines
        return str && typeof str === 'string' && (str.trim().match(/^{[\s\S]*?}$/) !== null);
    };
    /** @type {?} */
    var isNamedNodeMap = function (obj) {
        return obj && (obj.constructor.name === 'NamedNodeMap' || obj instanceof NamedNodeMap);
    };
    /** @type {?} */
    var namedNodeMapToObject = function (source) {
        /** @type {?} */
        var target = {};
        Object.keys(source).forEach(function (index) {
            /** @type {?} */
            var name = source[index].name;
            /** @type {?} */
            var value = source[index].value;
            target[name] = value;
        });
        return target;
    };
    /** @type {?} */
    var transformKeyNames = function (obj) {
        /** @type {?} */
        var _obj = obj;
        if (isJsonLikeString(obj)) {
            // Given attribute value is in the form of a JSON object -
            // Transforms the string into an object, as the Javascript API expects
            _obj = JSON.parse(obj);
        }
        else if (isNamedNodeMap(obj)) {
            _obj = namedNodeMapToObject(obj);
        }
        if (Array.isArray(_obj)) {
            // Transform all the array values (e.g. transformation array)
            _obj = _obj.map(function (currentValue) {
                return transformKeyNames(currentValue);
            });
        }
        else if (typeof _obj === 'object') {
            Object.keys(_obj).forEach(function (key) {
                /** @type {?} */
                var kebabKey = key.replace(/-/g, '_').toLocaleLowerCase().replace(/^cld(-|_)?/, '');
                /** @type {?} */
                var kebabValue = transformKeyNames(_obj[key]);
                delete _obj[key];
                _obj[kebabKey] = kebabValue;
            });
        }
        return _obj;
    };
    var Cloudinary = /** @class */ (function () {
        function Cloudinary(cloudinaryJsLib, configuration) {
            // Cloudinary JS already clones the given configuration so no need to clone it here too
            if (cloudinaryJsLib.CloudinaryJQuery) {
                this._cloudinaryInstance = new cloudinaryJsLib.CloudinaryJQuery(configuration);
            }
            else {
                this._cloudinaryInstance = new cloudinaryJsLib.Cloudinary(configuration);
            }
        }
        Object.defineProperty(Cloudinary.prototype, "cloudinaryInstance", {
            get: /**
             * @return {?}
             */ function () {
                return this._cloudinaryInstance;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Cloudinary.prototype.config = /**
         * @return {?}
         */
            function () {
                return this._cloudinaryInstance.config();
            };
        /**
         * @param {...?} parameters
         * @return {?}
         */
        Cloudinary.prototype.url = /**
         * @param {...?} parameters
         * @return {?}
         */
            function () {
                var parameters = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    parameters[_i] = arguments[_i];
                }
                var _a;
                return (_a = this._cloudinaryInstance).url.apply(_a, __spread(parameters));
            };
        /**
         * @param {...?} parameters
         * @return {?}
         */
        Cloudinary.prototype.imageTag = /**
         * @param {...?} parameters
         * @return {?}
         */
            function () {
                var parameters = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    parameters[_i] = arguments[_i];
                }
                var _a;
                return (_a = this._cloudinaryInstance).imageTag.apply(_a, __spread(parameters));
            };
        /**
         * @param {...?} parameters
         * @return {?}
         */
        Cloudinary.prototype.videoTag = /**
         * @param {...?} parameters
         * @return {?}
         */
            function () {
                var parameters = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    parameters[_i] = arguments[_i];
                }
                var _a;
                return (_a = this._cloudinaryInstance).videoTag.apply(_a, __spread(parameters));
            };
        /**
         * @param {?} img
         * @param {?} options
         * @return {?}
         */
        Cloudinary.prototype.responsive = /**
         * @param {?} img
         * @param {?} options
         * @return {?}
         */
            function (img, options) {
                // Cloudinary underlying JS library will handle responsive behavior
                this._cloudinaryInstance.cloudinary_update(img, options);
                this._cloudinaryInstance.responsive(options, false);
            };
        /**
         * Transforms a set of attributes and chained transformations to an options object that can be consumed by Cloudinary JS API
         * @param attributes HTML element attributes
         * @param childTransformations QueryList with the element's <cl-transformation> children for chained transformations
         * @param cloudinary Cloudinary service
         * @returns An options object that can be consumed by Cloudinary JS API
         */
        /**
         * Transforms a set of attributes and chained transformations to an options object that can be consumed by Cloudinary JS API
         * @param {?} attributes HTML element attributes
         * @param {?=} childTransformations QueryList with the element's <cl-transformation> children for chained transformations
         * @return {?} An options object that can be consumed by Cloudinary JS API
         */
        Cloudinary.prototype.toCloudinaryAttributes = /**
         * Transforms a set of attributes and chained transformations to an options object that can be consumed by Cloudinary JS API
         * @param {?} attributes HTML element attributes
         * @param {?=} childTransformations QueryList with the element's <cl-transformation> children for chained transformations
         * @return {?} An options object that can be consumed by Cloudinary JS API
         */
            function (attributes, childTransformations) {
                var _this = this;
                /** @type {?} */
                var options = transformKeyNames(attributes);
                // Add chained transformations
                if (childTransformations && childTransformations.length > 0) {
                    options.transformation = [];
                    // Support chained transformations
                    childTransformations.forEach(function (transformation) {
                        options.transformation.push(_this.toCloudinaryAttributes(transformation.getAttributes()));
                    });
                }
                // Add responsiveness
                if (options.responsive === '' || options.responsive === 'true' || options.responsive === true) {
                    options.responsive = true;
                }
                return options;
            };
        return Cloudinary;
    }());
    /**
     * @param {?} cloudinaryJsLib
     * @param {?} configuration
     * @return {?}
     */
    function provideCloudinary(cloudinaryJsLib, configuration) {
        return { provide: Cloudinary, useFactory: function () { return new Cloudinary(cloudinaryJsLib, configuration); } };
    }
    /** @type {?} */
    var isBrowser = function () {
        return typeof window !== 'undefined';
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CloudinaryTransformationDirective = /** @class */ (function () {
        function CloudinaryTransformationDirective(el) {
            this.el = el;
        }
        /**
         * @return {?}
         */
        CloudinaryTransformationDirective.prototype.getAttributes = /**
         * @return {?}
         */
            function () {
                return this.el.nativeElement.attributes;
            };
        CloudinaryTransformationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'cl-transformation'
                    },] },
        ];
        /** @nocollapse */
        CloudinaryTransformationDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        return CloudinaryTransformationDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var accessibilityEffect = {
        'darkmode': { effect: 'tint:75:black' },
        'brightmode': { effect: 'tint:50:white' },
        'monochrome': { effect: 'grayscale' },
        'colorblind': { effect: 'assist_colorblind' }
    };
    /** @type {?} */
    var predominantColorTransformPxl = [
        { width: 'iw_div_2', aspect_ratio: 1, crop: 'pad', background: 'auto' },
        { crop: 'crop', width: 1, height: 1, gravity: 'north_east' },
        { fetch_format: 'auto', quality: 'auto' }
    ];
    /** @type {?} */
    var predominantColorTransform = [
        { width: 'iw_div_2', aspect_ratio: 1, crop: 'pad', background: 'auto' },
        { crop: 'crop', width: 10, height: 10, gravity: 'north_east' },
        { width: 'iw', height: 'ih', crop: 'fill' },
        { fetch_format: 'auto', quality: 'auto' }
    ];
    /** @type {?} */
    var placeholderImageOptions = {
        'vectorize': { effect: 'vectorize', quality: 1 },
        'pixelate': { effect: 'pixelate', quality: 1, fetch_format: 'auto' },
        'blur': { effect: 'blur:2000', quality: 1, fetch_format: 'auto' },
        'predominant-color': predominantColorTransform
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CloudinaryPlaceHolder = /** @class */ (function () {
        function CloudinaryPlaceHolder(cloudinary) {
            this.cloudinary = cloudinary;
            this.options = {};
        }
        /**
         * @param {?} width
         * @return {?}
         */
        CloudinaryPlaceHolder.prototype.setWidth = /**
         * @param {?} width
         * @return {?}
         */
            function (width) {
                this.itemWidth = width;
            };
        /**
         * @param {?} height
         * @return {?}
         */
        CloudinaryPlaceHolder.prototype.setHeight = /**
         * @param {?} height
         * @return {?}
         */
            function (height) {
                this.itemHeight = height;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        CloudinaryPlaceHolder.prototype.setPublicId = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                this.publicId = id;
            };
        /**
         * @return {?}
         */
        CloudinaryPlaceHolder.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                this.placeholderImg = this.getPlaceholderImage();
            };
        /**
         * @return {?}
         */
        CloudinaryPlaceHolder.prototype.getPlaceholderImage = /**
         * @return {?}
         */
            function () {
                if (this.type === 'predominant-color' && this.itemHeight && this.itemWidth) {
                    return this.cloudinary.url(this.publicId, { transformation: __spread([this.options], predominantColorTransformPxl) });
                }
                else {
                    return this.cloudinary.url(this.publicId, { transformation: __spread([this.options], placeholderImageOptions[this.type] || placeholderImageOptions['blur']) });
                }
            };
        CloudinaryPlaceHolder.decorators = [
            { type: core.Component, args: [{
                        selector: 'cl-placeholder',
                        template: "<img [src]=\"this.placeholderImg\" [style.width.px]=\"this.itemWidth\" [style.height.px]=\"this.itemHeight\">",
                    },] },
        ];
        /** @nocollapse */
        CloudinaryPlaceHolder.ctorParameters = function () {
            return [
                { type: Cloudinary }
            ];
        };
        CloudinaryPlaceHolder.propDecorators = {
            type: [{ type: core.Input, args: ['type',] }],
            itemWidth: [{ type: core.HostBinding, args: ['style.width',] }],
            itemHeight: [{ type: core.HostBinding, args: ['style.height',] }],
            publicId: [{ type: core.HostBinding, args: ['attr.public-id',] }]
        };
        return CloudinaryPlaceHolder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CloudinaryImage = /** @class */ (function () {
        function CloudinaryImage(el, cloudinary) {
            this.el = el;
            this.cloudinary = cloudinary;
            this.onLoad = new core.EventEmitter();
            this.onError = new core.EventEmitter();
            this.shouldShowPlaceHolder = true;
            this.options = {};
        }
        /**
         * @return {?}
         */
        CloudinaryImage.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (isBrowser()) {
                    // Create an observer instance
                    this.observer = new MutationObserver(function () {
                        _this.loadImage();
                    });
                    /** @type {?} */
                    var config = { attributes: true, childList: true };
                    // pass in the target node, as well as the observer options
                    this.observer.observe(this.el.nativeElement, config);
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CloudinaryImage.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // Listen to changes on the data-bound property 'publicId'.
                // Update component unless this is the first value assigned.
                if (changes["publicId"] && !changes["publicId"].isFirstChange()) {
                    this.loadImage();
                }
            };
        /**
         * @return {?}
         */
        CloudinaryImage.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.observer && this.observer.disconnect) {
                    this.observer.disconnect();
                }
            };
        /**
         * @return {?}
         */
        CloudinaryImage.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.loadImage();
            };
        /**
         * @return {?}
         */
        CloudinaryImage.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                if (this.width && this.placeholderComponent) {
                    this.placeholderComponent.setWidth(this.width);
                }
                if (this.height && this.placeholderComponent) {
                    this.placeholderComponent.setHeight(this.height);
                }
                if (this.placeholderComponent) {
                    this.placeholderComponent.setPublicId(this.publicId);
                }
            };
        /**
         * @return {?}
         */
        CloudinaryImage.prototype.hasLoaded = /**
         * @return {?}
         */
            function () {
                this.shouldShowPlaceHolder = false;
            };
        /**
         * @return {?}
         */
        CloudinaryImage.prototype.loadImage = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // https://github.com/angular/universal#universal-gotchas
                // Fetch the image only for client side rendering by the browser
                if (isBrowser()) {
                    if (!this.publicId) {
                        throw new Error('You must set the public id of the image to load, e.g. <cl-image public-id={{photo.public_id}}...></cl-image>');
                    }
                    /** @type {?} */
                    var nativeElement = this.el.nativeElement;
                    /** @type {?} */
                    var image = nativeElement.children[0];
                    // Add onload and onerror handlers
                    image.onload = function (e) {
                        _this.onLoad.emit(e);
                    };
                    image.onerror = function (e) {
                        _this.onError.emit(e);
                    };
                    /** @type {?} */
                    var options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);
                    if (this.clientHints || (typeof this.clientHints === 'undefined' && this.cloudinary.config().client_hints)) {
                        delete options['class'];
                        delete options['data-src'];
                        delete options['responsive'];
                    }
                    if (this.placeholderComponent) {
                        this.placeholderHandler(options);
                    }
                    if (this.accessibility) {
                        this.options = options;
                        options.src = this.accessibilityModeHandler();
                    }
                    /** @type {?} */
                    var imageTag = this.cloudinary.imageTag(this.publicId, options);
                    this.setElementAttributes(image, imageTag.attributes());
                    if (options.responsive) {
                        this.cloudinary.responsive(image, options);
                    }
                }
            };
        /**
         * @param {?} element
         * @param {?} attributesLiteral
         * @return {?}
         */
        CloudinaryImage.prototype.setElementAttributes = /**
         * @param {?} element
         * @param {?} attributesLiteral
         * @return {?}
         */
            function (element, attributesLiteral) {
                var _this = this;
                Object.keys(attributesLiteral).forEach(function (attrName) {
                    /** @type {?} */
                    var attr = attrName === 'src' && _this.loading === 'lazy' ? 'data-src' : attrName;
                    element.setAttribute(attr, attributesLiteral[attrName]);
                });
            };
        /**
         * @param {?} options
         * @return {?}
         */
        CloudinaryImage.prototype.placeholderHandler = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var placeholderOptions = {};
                Object.keys(options).forEach(function (name) {
                    placeholderOptions[name] = (name === 'width' && !options[name].startsWith('auto') || name === 'height') ? Math.ceil(parseInt(options[name], 10) * 0.1) : options[name];
                });
                this.placeholderComponent.options = placeholderOptions;
            };
        /**
         * @return {?}
         */
        CloudinaryImage.prototype.accessibilityModeHandler = /**
         * @return {?}
         */
            function () {
                return this.cloudinary.url(this.publicId, { transformation: [this.options, accessibilityEffect[this.accessibility]] });
            };
        CloudinaryImage.decorators = [
            { type: core.Component, args: [{
                        selector: 'cl-image',
                        template: "<img [ngStyle]=\"{opacity: shouldShowPlaceHolder ? '0' : '1', position: shouldShowPlaceHolder ? 'absolute' : 'unset'}\"(load)=\"hasLoaded()\">\n  <div [style.display]=\"shouldShowPlaceHolder ? 'inline' : 'none'\">\n      <ng-content></ng-content>\n  </div>\n  ",
                    },] },
        ];
        /** @nocollapse */
        CloudinaryImage.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: Cloudinary }
            ];
        };
        CloudinaryImage.propDecorators = {
            publicId: [{ type: core.Input, args: ['public-id',] }],
            clientHints: [{ type: core.Input, args: ['client-hints',] }],
            loading: [{ type: core.Input, args: ['loading',] }],
            width: [{ type: core.Input, args: ['width',] }],
            height: [{ type: core.Input, args: ['height',] }],
            accessibility: [{ type: core.Input, args: ['accessibility',] }],
            transformations: [{ type: core.ContentChildren, args: [CloudinaryTransformationDirective,] }],
            placeholderComponent: [{ type: core.ContentChild, args: [CloudinaryPlaceHolder,] }],
            onLoad: [{ type: core.Output }],
            onError: [{ type: core.Output }]
        };
        return CloudinaryImage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CloudinaryVideo = /** @class */ (function () {
        function CloudinaryVideo(el, cloudinary, platformId) {
            this.el = el;
            this.cloudinary = cloudinary;
            this.platformId = platformId;
        }
        /**
         * @return {?}
         */
        CloudinaryVideo.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (typeof MutationObserver !== 'undefined') {
                    // Create an observer instance
                    this.observer = new MutationObserver(function () {
                        _this.loadVideo(_this.publicId);
                    });
                    /** @type {?} */
                    var config = { attributes: true, childList: true };
                    // pass in the target node, as well as the observer options
                    this.observer.observe(this.el.nativeElement, config);
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CloudinaryVideo.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // Listen to changes on the data-bound property 'publicId'.
                // Update component unless this is the first value assigned.
                if (changes["publicId"] && !changes["publicId"].isFirstChange()) {
                    this.loadVideo(changes["publicId"].currentValue);
                }
            };
        /**
         * @return {?}
         */
        CloudinaryVideo.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.observer && this.observer.disconnect) {
                    this.observer.disconnect();
                }
            };
        /**
         * @return {?}
         */
        CloudinaryVideo.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (!this.publicId) {
                    throw new Error('You must set the public id of the video to load, e.g. <cl-video public-id={{video.public_id}}...></cl-video>');
                }
                this.loadVideo(this.publicId);
            };
        /**
         * @param {?} publicId
         * @return {?}
         */
        CloudinaryVideo.prototype.loadVideo = /**
         * @param {?} publicId
         * @return {?}
         */
            function (publicId) {
                // https://github.com/angular/universal#universal-gotchas
                if (common.isPlatformBrowser(this.platformId)) {
                    /** @type {?} */
                    var nativeElement = this.el.nativeElement;
                    /** @type {?} */
                    var video = nativeElement.children[0];
                    /** @type {?} */
                    var options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);
                    /** @type {?} */
                    var videoTag = this.cloudinary.videoTag(publicId, options);
                    // Replace template with the custom video tag created by Cloudinary
                    this.appendSourceElements(video, videoTag.content());
                    // Add attributes
                    this.setElementAttributes(video, videoTag.attributes());
                }
            };
        /**
         * @param {?} element
         * @param {?} attributesLiteral
         * @return {?}
         */
        CloudinaryVideo.prototype.setElementAttributes = /**
         * @param {?} element
         * @param {?} attributesLiteral
         * @return {?}
         */
            function (element, attributesLiteral) {
                Object.keys(attributesLiteral).forEach(function (attrName) {
                    element.setAttribute(attrName, attributesLiteral[attrName]);
                });
            };
        /**
         * @param {?} element
         * @param {?} html
         * @return {?}
         */
        CloudinaryVideo.prototype.appendSourceElements = /**
         * @param {?} element
         * @param {?} html
         * @return {?}
         */
            function (element, html) {
                /** @type {?} */
                var fragment = document.createDocumentFragment();
                element.innerHTML = html;
                while (element.childNodes[0]) {
                    fragment.appendChild(element.childNodes[0]);
                }
                element.appendChild(fragment);
            };
        CloudinaryVideo.decorators = [
            { type: core.Component, args: [{
                        selector: 'cl-video',
                        template: '<video></video>'
                    },] },
        ];
        /** @nocollapse */
        CloudinaryVideo.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: Cloudinary },
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        CloudinaryVideo.propDecorators = {
            publicId: [{ type: core.Input, args: ['public-id',] }],
            transformations: [{ type: core.ContentChildren, args: [CloudinaryTransformationDirective,] }]
        };
        return CloudinaryVideo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CloudinaryImageSourceDirective = /** @class */ (function () {
        function CloudinaryImageSourceDirective(el, cloudinary) {
            this.el = el;
            this.cloudinary = cloudinary;
        }
        /**
         * @return {?}
         */
        CloudinaryImageSourceDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (isBrowser()) {
                    /** @type {?} */
                    var attrName = void 0;
                    /** @type {?} */
                    var propertyValue = void 0;
                    if (this.clHref) {
                        attrName = 'href';
                        propertyValue = this.clHref;
                    }
                    else if (this.clSrc) {
                        attrName = 'src';
                        propertyValue = this.clSrc;
                    }
                    else if (this.clSrcset) {
                        attrName = 'srcset';
                        propertyValue = this.clSrcset;
                    }
                    /** @type {?} */
                    var isSvg = false;
                    if (this.clHref &&
                        toString.call(this.el.nativeElement['href'] === '[object SVGAnimatedString]')) {
                        this.el.nativeElement.setAttribute('xlinkHref', 'xlink:href');
                        isSvg = true;
                    }
                    if (!attrName || !propertyValue) {
                        throw new Error('Directive value is missing for clHref/clSrc/clSrcset');
                    }
                    /** @type {?} */
                    var nativeElement = this.el.nativeElement;
                    /** @type {?} */
                    var options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);
                    /** @type {?} */
                    var attrValue = this.cloudinary.url(propertyValue, options);
                    this.el.nativeElement.setAttribute(attrName, attrValue);
                    /** @type {?} */
                    var msie = this.el.nativeElement.ownerDocument.documentMode;
                    if (msie && !isSvg) {
                        // IE logic here
                        this.el.nativeElement[attrName] = attrValue;
                    }
                }
            };
        CloudinaryImageSourceDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[clHref], [clSrc], [clSrcset]'
                    },] },
        ];
        /** @nocollapse */
        CloudinaryImageSourceDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: Cloudinary }
            ];
        };
        CloudinaryImageSourceDirective.propDecorators = {
            clHref: [{ type: core.Input }],
            clSrc: [{ type: core.Input }],
            clSrcset: [{ type: core.Input }],
            transformations: [{ type: core.ContentChildren, args: [CloudinaryTransformationDirective,] }]
        };
        return CloudinaryImageSourceDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CloudinaryBackgroundImageDirective = /** @class */ (function () {
        function CloudinaryBackgroundImageDirective(renderer, el, cloudinary) {
            this.renderer = renderer;
            this.el = el;
            this.cloudinary = cloudinary;
        }
        /**
         * @return {?}
         */
        CloudinaryBackgroundImageDirective.prototype.isBrowser = /**
         * @return {?}
         */
            function () {
                return typeof window !== 'undefined';
            };
        /**
         * @return {?}
         */
        CloudinaryBackgroundImageDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.isBrowser()) {
                    /** @type {?} */
                    var nativeElement = this.el.nativeElement;
                    /** @type {?} */
                    var options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);
                    /** @type {?} */
                    var imageUrl = this.cloudinary.url(this.clBackgroundImage, options);
                    this.renderer.setStyle(nativeElement, 'background-image', "url('" + imageUrl + "')");
                    this.renderer.setStyle(nativeElement, 'background-repeat', 'no-repeat');
                    this.renderer.setStyle(nativeElement, 'background-position', 'center');
                }
            };
        CloudinaryBackgroundImageDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[clBackgroundImage]'
                    },] },
        ];
        /** @nocollapse */
        CloudinaryBackgroundImageDirective.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ElementRef },
                { type: Cloudinary }
            ];
        };
        CloudinaryBackgroundImageDirective.propDecorators = {
            clBackgroundImage: [{ type: core.Input }],
            transformations: [{ type: core.ContentChildren, args: [CloudinaryTransformationDirective,] }]
        };
        return CloudinaryBackgroundImageDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LazyLoadDirective = /** @class */ (function () {
        function LazyLoadDirective(el) {
            this.el = el;
        }
        /**
         * @return {?}
         */
        LazyLoadDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (!this.isNativeLazyLoadSupported() && this.isLazyLoadSupported()) {
                    this.lazyLoad();
                }
                else {
                    this.loadImage();
                }
            };
        /**
         * @return {?}
         */
        LazyLoadDirective.prototype.loadImage = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var nativeElement = this.el.nativeElement;
                /** @type {?} */
                var image = nativeElement.children[0];
                image.setAttribute('src', image.dataset.src);
            };
        /**
         * @return {?}
         */
        LazyLoadDirective.prototype.isLazyLoadSupported = /**
         * @return {?}
         */
            function () {
                return window && 'IntersectionObserver' in window;
            };
        /**
         * @return {?}
         */
        LazyLoadDirective.prototype.isNativeLazyLoadSupported = /**
         * @return {?}
         */
            function () {
                return 'loading' in HTMLImageElement.prototype; // check loading property is defined on image or iframe
            };
        /**
         * @return {?}
         */
        LazyLoadDirective.prototype.lazyLoad = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var options = {
                    rootMargin: "0px 0px -50% 0px",
                };
                /** @type {?} */
                var observer = new IntersectionObserver(function (entries) {
                    entries.forEach(function (entry) {
                        if (entry.isIntersecting) {
                            _this.loadImage();
                            observer.unobserve(entry.target);
                        }
                    }, options);
                });
                observer.observe(this.el.nativeElement);
            };
        LazyLoadDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'cl-image[loading=lazy]'
                    },] },
        ];
        /** @nocollapse */
        LazyLoadDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        return LazyLoadDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CLOUDINARY_LIB = new core.InjectionToken('CLOUDINARY_LIB');
    /** @type {?} */
    var CLOUDINARY_CONFIGURATION = new core.InjectionToken('CLOUDINARY_CONFIGURATION');
    /**
     * @param {?} cloudinaryJsLib
     * @param {?} configuration
     * @return {?}
     */
    function createCloudinary(cloudinaryJsLib, configuration) {
        return new Cloudinary(cloudinaryJsLib, configuration);
    }
    var CloudinaryModule = /** @class */ (function () {
        function CloudinaryModule() {
        }
        /**
         * @param {?} cloudinaryJsLib
         * @param {?} cloudinaryConfiguration
         * @return {?}
         */
        CloudinaryModule.forRoot = /**
         * @param {?} cloudinaryJsLib
         * @param {?} cloudinaryConfiguration
         * @return {?}
         */
            function (cloudinaryJsLib, cloudinaryConfiguration) {
                return {
                    ngModule: CloudinaryModule,
                    providers: [
                        { provide: CLOUDINARY_LIB, useValue: cloudinaryJsLib },
                        { provide: CLOUDINARY_CONFIGURATION, useValue: cloudinaryConfiguration },
                        {
                            provide: Cloudinary,
                            useFactory: createCloudinary,
                            deps: [CLOUDINARY_LIB, CLOUDINARY_CONFIGURATION]
                        }
                    ]
                };
            };
        CloudinaryModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            CloudinaryImageSourceDirective,
                            CloudinaryBackgroundImageDirective,
                            CloudinaryImage,
                            CloudinaryVideo,
                            CloudinaryTransformationDirective,
                            LazyLoadDirective,
                            CloudinaryPlaceHolder,
                        ],
                        exports: [
                            CloudinaryImageSourceDirective,
                            CloudinaryBackgroundImageDirective,
                            CloudinaryImage,
                            CloudinaryVideo,
                            CloudinaryTransformationDirective,
                            LazyLoadDirective,
                            CloudinaryPlaceHolder
                        ]
                    },] },
        ];
        return CloudinaryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.provideCloudinary = provideCloudinary;
    exports.Cloudinary = Cloudinary;
    exports.isJsonLikeString = isJsonLikeString;
    exports.isNamedNodeMap = isNamedNodeMap;
    exports.transformKeyNames = transformKeyNames;
    exports.namedNodeMapToObject = namedNodeMapToObject;
    exports.isBrowser = isBrowser;
    exports.createCloudinary = createCloudinary;
    exports.CloudinaryImage = CloudinaryImage;
    exports.CloudinaryVideo = CloudinaryVideo;
    exports.CloudinaryTransformationDirective = CloudinaryTransformationDirective;
    exports.CloudinaryImageSourceDirective = CloudinaryImageSourceDirective;
    exports.CloudinaryBackgroundImageDirective = CloudinaryBackgroundImageDirective;
    exports.LazyLoadDirective = LazyLoadDirective;
    exports.CloudinaryPlaceHolder = CloudinaryPlaceHolder;
    exports.CLOUDINARY_LIB = CLOUDINARY_LIB;
    exports.CLOUDINARY_CONFIGURATION = CLOUDINARY_CONFIGURATION;
    exports.CloudinaryModule = CloudinaryModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,